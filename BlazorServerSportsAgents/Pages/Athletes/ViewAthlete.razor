@page "/athletes/view/{AthleteId:int}"

@using BlazorServerDbContextExample.Grid
@using Microsoft.EntityFrameworkCore
@using SportsAgents.Models
@using static System.Net.WebRequestMethods

@inject IHttpClientFactory IHttpClientFactory
@inject HttpClient Http


@if (NotFound && !Loading)
{
    <div class="alert alert-warning">A athlete with that id doesn't exist.</div>
}
else
{
    @if (Athlete is null || Loading)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <h1>Athlete informations</h1>
        <hr />
        <h3>Full name: @Athlete.FullName</h3>
        <h3>Age: @Athlete.Age</h3>
        <h3>Discipline: @Athlete.DisciplineName</h3>
        <h3>User: @Athlete.UserLogin</h3>
    }
}

@code {
    private bool Loading;

    [Parameter]
    public int AthleteId { get; set; }

    private int _lastAthleteId;

    private Athlete? Athlete { get; set; }

    private bool NotFound = false;

    protected override async Task OnParametersSetAsync()
    {
        if (_lastAthleteId != AthleteId)
        {
            _lastAthleteId = AthleteId;
            await LoadAthleteAsync();
        }
        await base.OnParametersSetAsync();
    }

    private async Task LoadAthleteAsync()
    {
        if (Loading)
        {
            return;
        }

        NotFound = false;
        Athlete = null;
        Loading = true;

        try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7047/api/Athletes/{AthleteId}");
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				Athlete = null;
			else if (response.IsSuccessStatusCode)
				Athlete = await response.Content.ReadFromJsonAsync<Athlete>();
		}
		catch (Exception ex) {
		}

        if (Athlete is null)
        {
            NotFound = true;
        }
        Loading = false;
    }

}
