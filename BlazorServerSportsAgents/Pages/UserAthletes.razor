@page "/user/user1/allAthletes"

@using BlazorServerDbContextExample.Grid
@using Microsoft.EntityFrameworkCore
@using SportsAgents.Models
@using SportsAgentsService
@inject IHttpClientFactory IHttpClientFactory
@inject IAthleteFilters Filters
@inject IDbContextFactory<SportsAgentsContext> DbFactory
@inject NavigationManager Navigation

<h1>Athletes</h1>
<GridWrapper @ref="Wrapper"
             FilterChanged="ReloadAsync"
             DeleteRequested="id => Wrapper.DeleteRequestId = id">
    <div class="container-fluid athletes-grid">
        <div class="row">&nbsp;</div>
        <div class="row">&nbsp;</div>
        <div class="row athlete-header">
            <div class="col-1">&nbsp;</div>
            <div class="col-2">&nbsp; Full name
            </div>
            <div class="col-3">&nbsp;Age
            </div>
            <div class="col-2">&nbsp;Discipline name
            </div>
            <div class="col-1">&nbsp;User login
            </div>
        </div>
        @if (Filters.Loading || athletes is null)
        {
            <div class="row">
                <div class="col-12 alert alert-info">
                    Loading...
                </div>
            </div>
        }
        @if (athletes is not null && athletes.Count == 0)
        {
            <div class="row">
                <div class="col-12 alert alert-warning">
                    No athletes found.
                </div>
            </div>
        }
        @if (athletes is not null)
        {
            @foreach (SportsAgentsService.Athlete athlete in athletes)
            {
                <UserAthleteRow @key=athlete CurrentAthlete="@athlete"
                    DeleteAthlete="DeleteAthleteAsync" />
            }
        }
    </div>
</GridWrapper>


@code{
    private GridWrapper Wrapper { get; set; } = new GridWrapper();

    private ICollection<SportsAgentsService.Athlete>? athletes { get; set; }

    private string IsDisabled(bool condition) =>
        !Filters.Loading && condition ? "" : "disabled";

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        await ReloadAsync();
        await base.OnParametersSetAsync();
    }

    private async Task DeleteAthleteAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Filters.Loading = true;

        if (Wrapper is not null && context.Athletes is not null)
        {
            var athlete = await context.Athletes
                .FirstAsync(c => c.Id == Wrapper.DeleteRequestId);

            if (athlete is not null)
            {
                context.Athletes?.Remove(athlete);
                await context.SaveChangesAsync();
            }
        }

        Filters.Loading = false;

        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        SportsAgentsClient sportsAgentsClient = new SportsAgentsClient("https://localhost:7047/", IHttpClientFactory.CreateClient());

        if (Wrapper is not null)
        {
            Wrapper.DeleteRequestId = 0;
        }

        athletes = new List<SportsAgentsService.Athlete>();

        using var context = DbFactory.CreateDbContext();
        var query = context.Athletes?.AsQueryable();

        if (query is not null)
        {
            //TODO: DO WRZUCENIA PRAWIDLOWY LOGIN
            athletes = await sportsAgentsClient.GetUserAthletesByLoginAsync("user1");
        }
    }
}
