@page "/users/user"

@using BlazorServerDbContextExample.Grid
@using BlazorServerSportsAgents.Helpers
@using Microsoft.EntityFrameworkCore
@using SportsAgents.Models
@using Microsoft.JSInterop


@inject IHttpClientFactory IHttpClientFactory
@inject IJSRuntime jsr
@inject HttpClient Http


@if (NotFound)
{
    <div class="alert alert-warning">You need to login to your account.</div>
}
else
{
    @if (User is null)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <h1>User informations</h1>
        <hr />
        <h3>User login: @User.Login</h3>
        <h3>Email: @User.Email</h3>
        <h3>Full name: @User.FullName</h3>
        <h3>Age: @User.Age</h3>
        <br />
    }
}

@code {
    [Parameter]
    public string UserLogin { get; set; }

    private string _lastUserLogin = string.Empty;

    private User? User { get; set; }

    private bool NotFound = false;

    string userdata;

    private string[] dataArray;


    protected override async Task OnParametersSetAsync()
    {
        if (_lastUserLogin != UserLogin)
        {
            _lastUserLogin = UserLogin;
            await LoadAthleteAsync();
        }
        await base.OnParametersSetAsync();
    }

    private async Task LoadAthleteAsync()
    {
        NotFound = false;
        User = null;

        if (dataArray == null)
        {
            dataArray = await AuthHelper.GetJWT(jsr);
            if (dataArray != null)
            {
                UserLogin = dataArray[0];
                userdata = dataArray[1]; 
            }
        }

		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7047/api/Users/{UserLogin}");
			requestMsg.Headers.Add("Authorization", "Bearer " + userdata);
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				User = null;
			else if (response.IsSuccessStatusCode)
				User = await response.Content.ReadFromJsonAsync<User>();
		}
		catch (Exception ex) {
		}

        if (User is null)
        {
            NotFound = true;
        }
    }
}
