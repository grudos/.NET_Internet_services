@page "/users/athletes/view/{AthleteId:int}"

@using BlazorServerDbContextExample.Grid
@using BlazorServerSportsAgents.Data
@using BlazorServerSportsAgents.Helpers
@using Microsoft.EntityFrameworkCore
@using SportsAgents.Models

@inject IDbContextFactory<SportsAgentsContext> DbFactory
@inject EditSuccess EditSuccessState
@inject IJSRuntime jsr
@inject IHttpClientFactory IHttpClientFactory
@inject HttpClient Http

@if (NotFound && !Loading)
{
    <div class="alert alert-warning">A athlete with that id doesn't exist.</div>
}
else
{
    @if (Athlete is null || Loading)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <h1>Athlete informations</h1>
        <br />
        @if (EditSuccess)
        {
            <div class="alert alert-success">Successfully updated the athlete.</div>
        }
        <hr />
        <h3>Full name: @Athlete.FullName</h3>
        <h3>Age: @Athlete.Age</h3>
        <h3>Discipline: @Athlete.DisciplineName</h3>
        <h3>User: @Athlete.UserLogin</h3>
        <br />
        @if (!Deleted)
        {
            <a class="btn btn-primary" href="/users/athletes/edit/@Athlete.Id" title="Edit">Edit</a><span>&nbsp;</span>
            @if (!ShowConfirmation)
            {
                <button class="btn btn-danger" @onclick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Delete</button>
            }
            else
            {
                <br />
                <br />
                <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
            }
        }
        else
        {
            <div class="btn btn-danger">This item has been deleted.</div>
        }
    }
}

@code {
    private bool Loading;

    [Parameter]
    public int AthleteId { get; set; }

    private int _lastAthleteId;

    [Parameter]
    public bool EditSuccess { get; set; }

    private Athlete? Athlete { get; set; }

    private bool NotFound = false;

    private bool ShowConfirmation = false;

    private bool Deleted = false;

    [Parameter]
    public string UserLogin { get; set; }

    string userdata;

    private string[] dataArray;



    protected override async Task OnParametersSetAsync()
    {
        if (_lastAthleteId != AthleteId)
        {
            EditSuccess = EditSuccessState.Success;
            EditSuccessState.Success = false;
            _lastAthleteId = AthleteId;
            await LoadAthleteAsync();
        }
        await base.OnParametersSetAsync();
    }

    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    private async Task LoadAthleteAsync()
    {
        if (Loading)
        {
            return;
        }

        NotFound = false;
        Athlete = null;
        Loading = true;


        using var context = DbFactory.CreateDbContext();

        if (context.Athletes is not null)
        {
            if (dataArray == null)
            {
                dataArray = await AuthHelper.GetJWT(jsr);
                if (dataArray != null)
                {
                    UserLogin = dataArray[0];
                    userdata = dataArray[1]; 
                }
            }

            try
            {
                var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7047/api/Users/{UserLogin}/Athletes/{AthleteId}");
                requestMsg.Headers.Add("Authorization", "Bearer " + userdata);
                var response = await Http.SendAsync(requestMsg);
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
				    await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				    userdata = null;
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                {
                    Athlete = null;
                }
                else if (response.IsSuccessStatusCode)
				    Athlete = await response.Content.ReadFromJsonAsync<Athlete>();
		    }
		    catch (Exception ex) {
		    }

            if (Athlete is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    private async Task DeleteAsync()
    {
        if (Loading)
        {
            return;
        }

        Loading = true;
        using var context = DbFactory?.CreateDbContext();

        if (context?.Athletes is not null)
        {
            var athlete = await context.Athletes
                .SingleOrDefaultAsync(c => c.Id == AthleteId);

            if (athlete is not null)
            {
                string[] dataArray;
                dataArray = await AuthHelper.GetJWT(jsr);
                UserLogin = dataArray[0];
                userdata = dataArray[1];
                try
                {
                    var requestMsg = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7047/api/Users/{UserLogin}/Athletes/{AthleteId}");
                    requestMsg.Headers.Add("Authorization", "Bearer " + userdata);

                    var response = await Http.SendAsync(requestMsg);
			        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			        {
				        await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				        userdata = null;
			        }
			        else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				        athlete = null;

		        }
		        catch (Exception ex) {
		        }

                Loading = false;
                Deleted = true;
            }
            else
            {
                Loading = false;
                await LoadAthleteAsync();
            }
        }
        else
        {
            Loading = false;
            await LoadAthleteAsync();
        }
    }
}
