@using Microsoft.AspNetCore.Components.Forms;
@using SportsAgents.Models

<h1>@Mode Athlete</h1>
<hr />
@if (Athlete is not null)
{
    <EditForm Model="@Athlete"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h3>Add athlete informations</h3>
        <p>
            <label>
                Full name:
                <InputText @bind-Value="Athlete.FullName" />
            </label>
        </p>
         <p>
            <label>
                Age:
                <InputNumber @bind-Value="Athlete.Age" />
            </label>
        </p>
         <p>
            <label>
                Discipline name:
                <InputText @bind-Value="Athlete.DisciplineName" />
            </label>
        </p>
        <br />
        <button disabled="@Busy" class="btn btn-warning"
                @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit"
                class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}
@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public Athlete? Athlete { get; set; }

    [Parameter]
    public Athlete? DbAthlete { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}